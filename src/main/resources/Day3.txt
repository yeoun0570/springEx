<웹 기본 동작 방식 이해>
브라우저 → 웹서버 → WAS(tomcat) → 서블릿(Servlet) 동작, JSP(Java Server Page)
웹서버
하나의 브라우저의 요청당(request, response) 객체 할당
WAS(tomcat)
JVM 위에서 동작한다.
tomcat은 J2EE 라고도 한다.
서블릿
웹에서 동작할 수 있게끔 만들어진 클래스(웹 클래스)
자바 기반 클래스
java패키지에서 관리
Pojo랑 차이점 학습필요
JSP
HTML태그와 같이 사용할 수 있는 클래스(페이지)
webapp 패키지에서 관리
일반 HTML이랑 구분하기 위해서 확장자는 .jsp로 한다.

<브라우저 자신이 원하는 정보 전달 방식 get, post>
HTML에서 보냈을 때(복습)
<form method=“get/post” action=“”> <input type=“text”> </form>
위와같이 <form> 태그에서 get과 post방식을 사용했다.
get
주소창에 직접 원하는 데이터를 적거나 링크<a>를 클릭해서 호출
원하는 웹 주소를 호출할 때 필요한 데이터를 ‘?’, ‘&’ 이용해서 같이 전송하는 방식
post
입력화면 주소와 데이터를 따로 보내는 방식
입력화면 : <form method=“post” action=“”> <input type=“text”> </form>
웹 화면을 통해서 실제 처리가 필요한 작업을 하기 위한 방식

<데이터 전달 구조>
요청(Request)
브라우저가 서버에 데이터를 요청하는 것
응답(Response)
서버가 요청에 대해서 응답 데이터를 만들어 브라우저로 반드시 보내야 한다.
서버는 브라우저에서 요청하는 정보 분석
정적 데이터 (static data)
항상 동일하게 고정된 데이터
HTML, CSS, 이미지, 동영상 등의 데이터
서버는 데이터를 담아서 브라우저한테 보여주면 된다
웹서버가 담당당
동적 데이터(dynamic data)
매번 필요할 때마다 다른 데이터를 동적으로 구성해서 전송해야하는 데이터 (서버 사이드 프로그래밍)
PHP, JSP, Servlet 프로그래밍
서버에서 동적으로 동작하는 웹기반 프로그램 작성
WAS가 담당


비즈니스 로직을 서블릿/JSP가 처리한다.
tomcat에서 서블릿/JSP를 바로 인스턴스화 시켜서 바로 사용하게끔 해준다.(?)

<HTTP>
브라우저 요청과 서버의 응답 사이에 약속을 통해서 처리되는 데이터 교환(Protocol(프로토콜))
웹에서는 HTTP(HyperText Transfer Protocol) 방식으로 데이터(메시지) 교환을 한다.
스킴(프로토콜) → https:// 형식
www(World Wide Web) → 웹서비스
www.google.com → 도메인 = 호스트
HTTP 메시지 확인
브라우저 개발자 도구 > Network탭
어떤 데이터가 교환되는지 확인
HTTP 메시지 구성
브라우저에서 전송(Request 메시지), 서버에서 데이터를 전송시 구성이 된다. (Response 메시지)
헤더(Header)와 몸체(Body)로 구성된다.
편지지 = Body
편지봉투 = Header
URI
자원의 식별방식
URL (위치 식별)
브라우저에서 특정한 URL 호출
‘요청’과 ‘응답’이 하나로 묶여서 처리된다.
URN (이름 식별)
비연결성 (Connectionless)
지속적인 연결을 보장하지 않는다.
웹 특성상 여러명의 사용자들이 브라우저를 통해서 서버를 호출하는 구조이기 때문이다.
서버는 한명의 사용자를 소중히 관리하는 것보다 최대한 여러명의 사용자에게 서비스를 제공하는 것이 목적이기 때문이다.
이를 위해 요청과 응답을 처리한 후에는 연결을 종료한다.
새로고침
서버에 연결이 끊겼으니 다시 요청을 보내는 행위

<자바 서버 사이드 프로그래밍>
서버 사이드 프로그래밍
서버 쪽에서 프로그래밍을 통해서 데이터를 처리할 수 있도록 개발
해야할 일
동시에 여러 요청(Request)가 들어온다면 어떻게 처리해야할까?
서버에서 문제가 생기면 이를 어떻게 처리해야 하는가?
이에 대한 다양한 기술적인 처리 방법 찾아내서 해결해야 하고 그 과정이 중요
어떤 방법으로 데이터 전송할 때 최적화할 수 있을까?
성능평가, 서버 부하 테스트
분산환경이나 분산처리 같은 문제들에 대해서 들여다보고 서버를 운영하는 방법에 대해 고민


<참고>
https://tomcat.apache.org/tomcat-9.0-doc/
https://linux.systemv.pe.kr/?s=ee-8
위의 ‘해야할 일’에서 고민한 결과를 JavaEE 기술 스펙으로 정리해 놓은곳

<Servlet, JSP>
Servlet(서버에서 클래스), JSP(사용자에서 서버) 보내주는 메시지를 처리해서 보여주는 기술
Servlet (서블릿) 기술
서버에서 동적으로 요청과 응답을 처리하는 API들을 정의한것
서블릿을 지원하는 환경(WAS : Tomcat)에서 서블릿API를 이용해서 코드를 작성하고 서버에 설정해서 서블릿 프로그램을 작성

브라우저에서 요청하면 Servlet API를 통해서 만든 Servlet 클래스로 받고
JSP API로 만든 JSP파일로 응답
더 뒷단에서는 DI컨테이너인 ApplicationContext를 관리하는 root-context.xml이 tomcat의 web.xml에 등록

Tomcat의 역할
웹 클래스는 웹컨테이너(Tomcat)이 객체를 생성하고 호출한다.
서블릿 클래스에에서 생성하는 객체를 관리한다.
서블릿/JSP 코드 개발은 자바(JS2E API) + 서블릿 API를 함께 사용하여 개발한다.

<JSP>
JSP는 기본적으로 GET/POST  방식의 호출을 구분하지 않기 때문에 POST 방식으로 접근해야 하는 리소스도 GET으로 호출할 수 있다.
유지보수 측면에서도 다시 리소스의 URL을 재조정해야 하는 불편함이 존재한다.
현재 자바의 JSP 사용
JSP에서 쿼리스트링이나 파라미터를 직접 처리하지 않는다. → 서블릿으로 처리
JSP는 입력화면을 구성하거나 처리 결과를 출력하는 용도로만 사용
브라우저는 직접 JSP 경로를 호출하지 않고 서블릿 경로를 통해서 파일을 보는 방식
문제를 해결하기 위해 ‘웹 MVC’ 방식으로 비즈니스 로직은 서블릿에서, 처리결과는 JSP에서 역할을 분담하도록 개선하여 사용하고 있다.



<WebMVC 방식>
서블릿 코드는 자바코드를 이용할수 있고, 상속이나 인터페이스의 처리도 가능하다.
WebMVC(Model - View - Controller) 역할을 분리해서 처리하는 구조이다.
데이터는 Controller에서 처리
결과는 View에서 처리




<PRG 패턴(POST-Redirect-GET>
웹 MVC 구조에서 흔하게 사용하는 패턴. POST방식과 Redirect를 결합해서 사용하는 패턴이다.
동작 원리
사용자는 컨트롤러에게 원하는 작업을 POST방식 처리 요청
POST 방식을 컨트롤러에서 처리하고 브라우저는 다른 경로로 이동(GET)하라는 응답(Redirect)한다.
브라우저는 GET 방식으로 이동

